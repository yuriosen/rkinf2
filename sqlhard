CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR NOT NULL,
    quantity INTEGER NOT NULL DEFAULT 0
);
CREATE TABLE operations_log (
    id SERIAL PRIMARY KEY,
    product_id INTEGER REFERENCES products(id),
    operation VARCHAR CHECK (operation IN ('ADD', 'REMOVE')),
    quantity INTEGER,
    operation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE OR REPLACE PROCEDURE update_stock(
    product_id INT,
    operation VARCHAR,
    quantity INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    IF operation = 'REMOVE' THEN
        IF (SELECT quantity FROM products WHERE id = product_id) < quantity THEN
            RAISE EXCEPTION 'Недостаточное количество товара для операции REMOVE';
        END IF;
    END IF;
    IF operation = 'ADD' THEN
        UPDATE products
        SET quantity = quantity + quantity
        WHERE id = product_id;
    ELSIF operation = 'REMOVE' THEN
        UPDATE products
        SET quantity = quantity - quantity
        WHERE id = product_id;
    END IF;
    INSERT INTO operations_log (product_id, operation, quantity)
    VALUES (product_id, operation, quantity);
    
END;
$$;
CREATE OR REPLACE FUNCTION after_stock_update() 
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO operations_log (product_id, operation, quantity)
    VALUES (NEW.id, 
            CASE 
                WHEN OLD.quantity < NEW.quantity THEN 'ADD'
                WHEN OLD.quantity > NEW.quantity THEN 'REMOVE'
            END,
            ABS(NEW.quantity - OLD.quantity));
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER stock_update_trigger
AFTER UPDATE OF quantity ON products
FOR EACH ROW
EXECUTE FUNCTION after_stock_update();
